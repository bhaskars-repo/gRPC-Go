//
//@Author: Bhaskar S
//@Blog:   https://www.polarsparc.com
//@Date:   xx Dec 2020

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: quotepb/best_quote.proto

package quotepb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BestQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Age      int32  `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
}

func (x *BestQuoteRequest) Reset() {
	*x = BestQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quotepb_best_quote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BestQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestQuoteRequest) ProtoMessage() {}

func (x *BestQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quotepb_best_quote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestQuoteRequest.ProtoReflect.Descriptor instead.
func (*BestQuoteRequest) Descriptor() ([]byte, []int) {
	return file_quotepb_best_quote_proto_rawDescGZIP(), []int{0}
}

func (x *BestQuoteRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *BestQuoteRequest) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

type BestQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string  `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Price    float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *BestQuoteResponse) Reset() {
	*x = BestQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quotepb_best_quote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BestQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestQuoteResponse) ProtoMessage() {}

func (x *BestQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quotepb_best_quote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestQuoteResponse.ProtoReflect.Descriptor instead.
func (*BestQuoteResponse) Descriptor() ([]byte, []int) {
	return file_quotepb_best_quote_proto_rawDescGZIP(), []int{1}
}

func (x *BestQuoteResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *BestQuoteResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

var File_quotepb_best_quote_proto protoreflect.FileDescriptor

var file_quotepb_best_quote_proto_rawDesc = []byte{
	0x0a, 0x18, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x70, 0x62, 0x2f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x40, 0x0a, 0x10, 0x42, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x42, 0x65,
	0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x32, 0x65, 0x0a, 0x10, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x42, 0x40, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x70, 0x61, 0x72, 0x63, 0x2e, 0x67, 0x63, 0x73, 0x50, 0x01,
	0x5a, 0x28, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x70, 0x61, 0x72, 0x63, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_quotepb_best_quote_proto_rawDescOnce sync.Once
	file_quotepb_best_quote_proto_rawDescData = file_quotepb_best_quote_proto_rawDesc
)

func file_quotepb_best_quote_proto_rawDescGZIP() []byte {
	file_quotepb_best_quote_proto_rawDescOnce.Do(func() {
		file_quotepb_best_quote_proto_rawDescData = protoimpl.X.CompressGZIP(file_quotepb_best_quote_proto_rawDescData)
	})
	return file_quotepb_best_quote_proto_rawDescData
}

var file_quotepb_best_quote_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_quotepb_best_quote_proto_goTypes = []interface{}{
	(*BestQuoteRequest)(nil),  // 0: clientstream.BestQuoteRequest
	(*BestQuoteResponse)(nil), // 1: clientstream.BestQuoteResponse
}
var file_quotepb_best_quote_proto_depIdxs = []int32{
	0, // 0: clientstream.BestQuoteService.getBestQuote:input_type -> clientstream.BestQuoteRequest
	1, // 1: clientstream.BestQuoteService.getBestQuote:output_type -> clientstream.BestQuoteResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_quotepb_best_quote_proto_init() }
func file_quotepb_best_quote_proto_init() {
	if File_quotepb_best_quote_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_quotepb_best_quote_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BestQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quotepb_best_quote_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BestQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quotepb_best_quote_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quotepb_best_quote_proto_goTypes,
		DependencyIndexes: file_quotepb_best_quote_proto_depIdxs,
		MessageInfos:      file_quotepb_best_quote_proto_msgTypes,
	}.Build()
	File_quotepb_best_quote_proto = out.File
	file_quotepb_best_quote_proto_rawDesc = nil
	file_quotepb_best_quote_proto_goTypes = nil
	file_quotepb_best_quote_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BestQuoteServiceClient is the client API for BestQuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BestQuoteServiceClient interface {
	GetBestQuote(ctx context.Context, opts ...grpc.CallOption) (BestQuoteService_GetBestQuoteClient, error)
}

type bestQuoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBestQuoteServiceClient(cc grpc.ClientConnInterface) BestQuoteServiceClient {
	return &bestQuoteServiceClient{cc}
}

func (c *bestQuoteServiceClient) GetBestQuote(ctx context.Context, opts ...grpc.CallOption) (BestQuoteService_GetBestQuoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BestQuoteService_serviceDesc.Streams[0], "/clientstream.BestQuoteService/getBestQuote", opts...)
	if err != nil {
		return nil, err
	}
	x := &bestQuoteServiceGetBestQuoteClient{stream}
	return x, nil
}

type BestQuoteService_GetBestQuoteClient interface {
	Send(*BestQuoteRequest) error
	CloseAndRecv() (*BestQuoteResponse, error)
	grpc.ClientStream
}

type bestQuoteServiceGetBestQuoteClient struct {
	grpc.ClientStream
}

func (x *bestQuoteServiceGetBestQuoteClient) Send(m *BestQuoteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bestQuoteServiceGetBestQuoteClient) CloseAndRecv() (*BestQuoteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BestQuoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BestQuoteServiceServer is the server API for BestQuoteService service.
type BestQuoteServiceServer interface {
	GetBestQuote(BestQuoteService_GetBestQuoteServer) error
}

// UnimplementedBestQuoteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBestQuoteServiceServer struct {
}

func (*UnimplementedBestQuoteServiceServer) GetBestQuote(BestQuoteService_GetBestQuoteServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBestQuote not implemented")
}

func RegisterBestQuoteServiceServer(s *grpc.Server, srv BestQuoteServiceServer) {
	s.RegisterService(&_BestQuoteService_serviceDesc, srv)
}

func _BestQuoteService_GetBestQuote_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BestQuoteServiceServer).GetBestQuote(&bestQuoteServiceGetBestQuoteServer{stream})
}

type BestQuoteService_GetBestQuoteServer interface {
	SendAndClose(*BestQuoteResponse) error
	Recv() (*BestQuoteRequest, error)
	grpc.ServerStream
}

type bestQuoteServiceGetBestQuoteServer struct {
	grpc.ServerStream
}

func (x *bestQuoteServiceGetBestQuoteServer) SendAndClose(m *BestQuoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bestQuoteServiceGetBestQuoteServer) Recv() (*BestQuoteRequest, error) {
	m := new(BestQuoteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BestQuoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientstream.BestQuoteService",
	HandlerType: (*BestQuoteServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getBestQuote",
			Handler:       _BestQuoteService_GetBestQuote_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "quotepb/best_quote.proto",
}
